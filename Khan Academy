SQL BASICS


Challenge: Book list database

STEP 1:

What are your favorite books? You can make a database table to store them in! In this first step, create a table to store your list of books. It should have columns for id, name, and rating.

------SQL Code ---------
CREATE TABLE books (id INTEGER PRIMARY KEY, name TEXT, rating INTEGER);

STEP 2:

Now, add three of your favorite books into the table.

CREATE TABLE books (id INTEGER PRIMARY KEY, name TEXT, rating INTEGER);

INSERT INTO books VALUES (1, 'The Alchemist', 10);
INSERT INTO books VALUES (2, 'Romeo and Juliet', '10');
INSERT INTO books VALUES (3, 'How to Live Like A Monk', '8');

************************************************************************************************************************

Challenge: Box office hits database

STEP 1:

Select them all
This database contains an incomplete list of box office hits and their release year. In this challenge, you're going to get the results back out of the database in different ways! In this first step, just select all the movies.
CREATE TABLE movies (id INTEGER PRIMARY KEY, name TEXT, release_year INTEGER);
INSERT INTO movies VALUES (1, "Avatar", 2009);
INSERT INTO movies VALUES (2, "Titanic", 1997);
INSERT INTO movies VALUES (3, "Star Wars: Episode IV - A New Hope", 1977);
INSERT INTO movies VALUES (4, "Shrek 2", 2004);
INSERT INTO movies VALUES (5, "The Lion King", 1994);
INSERT INTO movies VALUES (6, "Disney's Up", 2009);
 
SELECT * FROM movies;

STEP 2:
Filter recent movies
Now, add a second query after the first, that retrieves only the movies that were released in the year 2000 or later, not before. Sort the results so that the earlier movies are listed first. You should have 2 SELECT statements after this step.

SELECT * FROM movies
WHERE release_year >= 2000
ORDER BY release_year;

***************************************************************************************************************************

Challenge: TODO list database stats

Step 1
Here's a table containing a TODO list with the number of minutes it will take to complete each item. Insert another item to your todo list with the estimated minutes it will take.

CREATE TABLE todo_list (id INTEGER PRIMARY KEY, item TEXT, minutes INTEGER);
INSERT INTO todo_list VALUES (1, "Wash the dishes", 15);
INSERT INTO todo_list VALUES (2, "vacuuming", 20);
INSERT INTO todo_list VALUES (3, "Learn some stuff on KA", 30);
INSERT INTO todo_list VALUES (4, "Skin Care Routine", 10);

Step 2
Select the SUM of minutes it will take to do all of the items on your TODO list. You should only have one SELECT statement.

CREATE TABLE todo_list (id INTEGER PRIMARY KEY, item TEXT, minutes INTEGER);
INSERT INTO todo_list VALUES (1, "Wash the dishes", 15);
INSERT INTO todo_list VALUES (2, "vacuuming", 20);
INSERT INTO todo_list VALUES (3, "Learn some stuff on KA", 30);
INSERT INTO todo_list VALUES (4, "Skin Care Routine", 10);

SELECT SUM(minutes) FROM todo_list;
****************************************************************************************************************************

Project: Design a store database

Create your own store! Your store should sell one type of things, like clothing or bikes, whatever you want your store to specialize in. You should have a table for all the items in your store, and at least 5 columns for the kind of data you think you'd need to store. You should sell at least 15 items, and use select statements to order your items by price and show at least one statistic about the items.


CREATE TABLE plants (id INTEGER PRIMARY KEY, name TEXT, quantity INTEGER, usd INTEGER);

INSERT INTO plants VALUES (1, 'Cactus', 7, 5);
INSERT INTO plants VALUES (2, 'Pathos', 4, 19);
INSERT INTO plants VALUES (3, 'Aloe Vera', 2, 4);
INSERT INTO plants VALUES (4, 'Cilantro', 5, 15);
INSERT INTO plants VALUES (5, 'Mint', 4, 13);
INSERT INTO plants VALUES (6, 'Creeping Jenny', 3, 7);
INSERT INTO plants VALUES (7, 'Houseleek', 5, 5);
INSERT INTO plants VALUES (8, 'Lantana', 3, 20);
INSERT INTO plants VALUES (9, 'Basil', 4, 10);
INSERT INTO plants VALUES (10, 'Sage', 1, 18);
INSERT INTO plants VALUES (11, 'Clematis', 3, 10);
INSERT INTO plants VALUES (12, 'Honeysuckle', 7, 5);
INSERT INTO plants VALUES (13, 'Blue Mist Spirea', 2, 8);
INSERT INTO plants VALUES (14, 'Devil Eye', 5, 10);
INSERT INTO plants VALUES (15, 'Butterfly Weed', 1, 17);


SELECT * FROM plants ORDER BY usd DESC;
SELECT * FROM plants ORDER BY quantity DESC;

SELECT SUM(quantity) AS '# of Plants' FROM plants;

SELECT AVG(usd) AS 'Avg plant Cost' FROM plants;

SELECT name, MAX(usd) AS 'Highly Priced Plant' FROM plants;

